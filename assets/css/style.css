/*
"Be aware of the many CSS selectors available: https://www.w3schools.com/cssref/css_selectors.asp.
That way, you can intuitively pick the right one for any context."
*/

/* For device widths: https://viewportsizer.com/devices/. */

/* Remember "tab test" for accessibility. */

/************************************************************
********** For Mobile/Narrow Viewport **********
************************************************************/

/* Remember I worked with FEM's mobile demo at zoom [N/A this time]. */

/* Always use this, as Brian Holt advises. It makes the size ("width", for example) of every element equal to the element's content + its padding + its border, and not inclusive of margin of course. */
* {
    box-sizing: border-box;
}
  
html, body {
    margin: 0;
    padding: 0;
}
  
body {
    font-family: 'Rubik', sans-serif;
    padding: 115px 30px 0 30px;
    background-color: hsl(226, 43%, 10%);
}

[v-cloak] { /* for some reason this rule is not creating the desired effect in the wide viewport (even when I explicitly add this CSS rule to the CSS for the wide viewport, which I shouldn't even have to do) */
    display: none;
}
  
/****************************************
header
****************************************/
  
/* for this project, <header> is inside of <main> because of what's needed for the desktop viewport Grid work */

/****************************************
main
****************************************/
  
main {
    display: grid;
    grid-gap: 32px 0; /* first value is for top and bottom (i.e., space between rows), second value is for left and right (i.e., space between columns) */
    /* grid-template-rows: repeat(6, 260px); */ /* seems I don't need this for this project, I guess because heights are established by this element's children */
}
  
header {
    display: grid;
    grid-template-rows: 150px 40px 105px;
}
  
ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
}

header ul {
    border-radius: 20px;
}

.header-list-1 {
    background-color: hsl(246, 80%, 60%);
    padding-left: 22px;
    grid-row: 1 / 3;
    grid-column: 1 / 2;
    order: 1;
    display: flex;
    align-items: center;
    gap: 25px;
}
  
.header-list-1 img {
    height: 102px;
    border: 4px solid white;
    border-radius: 50%;
}

header p {
    margin: 0;
    padding: 0;
}

.header-list-1 p:first-child {
    color: hsl(236, 100%, 87%);
    font-size: 21px;
}

.header-list-1 p:last-child {
    color: white;
    font-size: 34px;
    font-weight: 300;
}

.header-list-2 {
    background-color: hsl(235, 46%, 20%);
    padding-top: 40px;
    grid-row: 2 / 4;
    grid-column: 1 / 2;
    display: flex;
    justify-content: space-around;
    align-items: center;
}
  
.header-list-2 button {
    background-color: hsl(235, 46%, 20%);
    color: hsl(235, 45%, 61%);
    font-size: 26px;
    font-family: 'Rubik', sans-serif;
    border: none;
    cursor: pointer;
    padding: 0;
}

.header-list-2 button:hover {
    color: white;
}

.header-list-2 button:focus {
    color: white;
}

.header-list-2 .active {
    color: white;
}

section {
    display: grid;
    grid-template-rows: 55px 75px 100px;
}

section .for-background-image {
    border-radius: 20px;
    grid-row: 1 / 3;
    grid-column: 1 / 2;
}
  
.work .for-background-image {
    background:
        url("../../assets/img/icon-work.svg")
            no-repeat
            hsl(15, 100%, 70%)
            scroll
            92% -15px / 112px 112px;
}

.play .for-background-image {
    background:
        url("../../assets/img/icon-play.svg")
            no-repeat
            hsl(195, 74%, 62%)
            scroll
            90% -7px / 112px 113px;
}

.study .for-background-image {
    background:
        url("../../assets/img/icon-study.svg")
            no-repeat
            hsl(348, 100%, 68%)
            scroll
            92% -9px / 112px 112px;
}

.exercise .for-background-image {
    background:
        url("../../assets/img/icon-exercise.svg")
            no-repeat
            hsl(145, 58%, 55%)
            scroll
            92% -1px / 121.5px 82.5px;
}

.social .for-background-image {
    background:
        url("../../assets/img/icon-social.svg")
            no-repeat
            hsl(264, 64%, 52%)
            scroll
            94% -22px / 109.5px 146px;
}
  
.self-care .for-background-image {
    background:
        url("../../assets/img/icon-self-care.svg")
            no-repeat
            hsl(43, 84%, 65%)
            scroll
            94% -16px / 100px 100px;
}

.activity-list {
    padding: 0 33px 0 33px;
    cursor: pointer;
    background-color: hsl(235, 46%, 20%);
    border-radius: 20px;
    grid-row: 2 / 4;
    grid-column: 1 / 2;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 10px;
}

.activity-list:hover {
    background-color: hsl(235, 36%, 30%);
}

.activity-list-ul-1 {
    display: flex;
    justify-content: space-between;
}
  
.activity-list-ul-1 li:first-child {
    color: white;
    font-size: 26px;
    font-weight: 500;
}

.activity-list-ul-1 button {
    background-color: hsl(235, 46%, 20%);
    border: none;
    cursor: pointer;
    padding: 0;
}

.activity-list:hover .activity-list-ul-1 button { /* REMEMBER that this sort of thing can be done in CSS! */
    background-color: hsl(235, 36%, 30%);
}

/* this is what makes each of the ellipses white upon button hover */
.activity-list-ul-1 button:hover path { /* REMEMBER that this sort of thing can be done in CSS! */
    fill: white;
}

.activity-list-ul-2 {
    display: flex;
    justify-content: space-between;
}

.activity-list-ul-2 li:first-child {
    color: white;
    font-size: 43px;
    font-weight: 300;
}
  
.activity-list-ul-2 li:last-child {
    color: hsl(236, 100%, 87%);
    font-size: 22px;
    align-self: center;
}

/****************************************
footer
****************************************/

.attribution {
    text-align: center;
    font-size: 11px;
    margin-bottom: 3px;
    margin-top: 103px;
    color: white;
}

.attribution a {
    color: hsl(228, 45%, 44%); /*hsl(hue, saturation, lightness)*/
}

  
/************************************************************
********** For Desktop/Wide Viewport **********
************************************************************/
  
@media screen and (min-width: 768px) { /* starting at width of 768px, the code below (which is only for CHANGES to the above code) will take effect. */
  
    body {
        padding: 0;
        height: 100vh; /* making <body> the same height as the viewport, I believe. This may not be necessary here because of how I set things up above */
        display: flex; /* this and the below line (in conjunction with 'margin-top: auto' on the footer) are here JUST to stick the footer to the bottom */
        flex-direction: column;
    }

    #app {
        display: grid; /* why is this necessary? Is it just for centering? I think so */
        margin: auto; /* this centers <main> */
    }

    /****************************************
    header
    ****************************************/
  
    /* for this project, <header> is inside of <main> because of what's needed for the desktop viewport Grid work */
  
    /* Robert on <header>:
    It's not required, but it is often the right element to use when you need an introductory section.
    You could absolutely leave your header element as a <header> element, and just move it inside your <main>.
    */
  
    /****************************************
    main
    ****************************************/
  
    main {
        grid-template-rows: repeat(2, auto); /* not needed because Grid knows */
        grid-template-columns: repeat(4, 32vh);
        grid-gap: 28px;
    }
  
    header {
        margin-bottom: 0;
        grid-row: span 2; /* here this is functionally the same as 'grid-row: 1 / 3;' but is more adaptable to changes because it's less hardcoded */
        grid-template-rows: 290px 40px 145px; /* important because I'm setting the PROPORTIONS of the parts of the <header> */
        align-content: space-between; /* why this? Go here https://css-tricks.com/snippets/css/complete-guide-grid/ and ctrl F "align-content". If I didn't want to use 'align-content...', I could have used 'grid-template-rows: 61% 8.5% 30.5%;' instead of hardcoding with px */
    }
    
    header ul {
        border-radius: 15px;
    }
    
    .header-list-1 {
        padding: 35px 0 0 25px;
        flex-direction: column;
        align-items: flex-start;
        gap: 35px;
    }
  
    .header-list-1 p:first-child {
        font-size: 13px;
    }
  
    .header-list-1 img {
        height: 90px;
    }
  
    .header-list-1 p:last-child span {
        display: block;
    }
    
    .header-list-2 {
        padding-left: 25px;
        flex-direction: column;
        justify-content: space-evenly;
        align-items: flex-start;
    }
  
    .header-list-2 button {
        font-size: 17px;
    }
  
    .work {
        grid-column: 2 / 3;
    }
  
    .play {
        grid-column: 3 / 4;
    }
  
    .study {
        grid-column: 4 / 5;
    }
  
    .exercise {
        grid-column: 2 / 3;
    }
  
    .social {
        grid-column: 3 / 4;
    }
  
    .self-care {
        grid-column: 4 / 5;
    }
  
    section .for-background-image {
        border-radius: 15px;
    }
  
    .work .for-background-image {
        background:
            url("../../assets/img/icon-work.svg")
                no-repeat
                hsl(15, 100%, 70%)
                scroll
                90% -15px / 97px 97px;
    }
  
    .play .for-background-image {
        background:
            url("../../assets/img/icon-play.svg")
                no-repeat
                hsl(195, 74%, 62%)
                scroll
                88% -7px / 97px 98px;
    }
  
    .study .for-background-image {
        background:
            url("../../assets/img/icon-study.svg")
                no-repeat
                hsl(348, 100%, 68%)
                scroll
                90% -9px / 97px 97px;
    }
  
    .exercise .for-background-image {
        background:
            url("../../assets/img/icon-exercise.svg")
                no-repeat
                hsl(145, 58%, 55%)
                scroll
                89% -1px / 101.25px 68.75px;
    }
  
    .social .for-background-image {
        background:
            url("../../assets/img/icon-social.svg")
                no-repeat
                hsl(264, 64%, 52%)
                scroll
                91% 0px / 90px 120px;
    }
  
    .self-care .for-background-image {
        background:
            url("../../assets/img/icon-self-care.svg")
                no-repeat
                hsl(43, 84%, 65%)
                scroll
                90% -13px / 82px 82px;
    }
  
    .activity-list {
        border-radius: 15px;
        padding: 25px 32px 0 32px;
        justify-content: flex-start;
    }
  
    .activity-list-ul-1 li:first-child {
        font-size: 17px;
        margin-bottom: 11px;
    }
  
    .activity-list-ul-1 svg {
        width: 19px;
    }
  
    .activity-list-ul-2 {
        display: block;
    }
  
    .activity-list-ul-2 li:first-child {
        margin-bottom: 10px;
    }
  
    .activity-list-ul-2 li:last-child {
        font-size: 15px;
    }
  
    /****************************************
    footer
    ****************************************/
  
    .attribution {
        margin-top: auto; /* this line (in conjunction with the two Flex lines on <body>) is here JUST to stick the footer to the bottom */
    }
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
/* KEEP THIS AS A REFERENCE:

parent/container/row {
    display: flex;    mandatory 
    flex-direction: ;    row (default) | row-reverse | column | column-reverse 
    justify-content: ;    flex-start (default) | flex-end | center | space-between | space-around | space-evenly 
    align-items: ;    flex-start | flex-end | center | (baseline) | stretch (default) 
    flex-wrap: ;    nowrap (default) | wrap | wrap-reverse 
    align-content: ;    flex-start | flex-end | center | space-between | space-around | stretch (default)

    note on 'align-content' (paraphrased from flexboxfroggy.com): 'align-content' determines the spacing between lines, while 'align-items' determines how the items as a whole are aligned within the container; when there is only one line, 'align-content' has no effect

    flex-flow: ;    this is shorthand for 'flex-direction: ;' and 'flex-wrap: ;' (e.g., 'flex-flow: column wrap;')
}

child/item/cell {
    align-self: ;    flex-start | flex-end | center | (baseline) | stretch (default)
    flex-grow: ;    0 is default (Jen Kramer: This is very hard to understand)
    flex-shrink: ;    1 is default (Jen Kramer: This is very hard to understand)
    flex-basis: ;    auto is default (Jen Kramer: This is basically the 'width' property--never use with Flexbox--but with some flexibility you can't control)
    order: ;    0 is default

    flex: [flex-grow number, flex-shrink number, flex-basis number];    this is a way (instead of using % outside of Flexbox) to set relative sizes of elements. (This is how I THOUGHT 'flex-grow' worked.) An example is 'flex: 1 1 0;' (the shorthand for which is the oft-used 'flex: 1;').
    
    margin-top: auto;    this puts the element at the bottom.
}

*/